---
name: Publish
run-name: Publish
on:
  push:
    branches:
      - main
env:
  NODE_AUTH_TOKEN: ${{ secrets.PAGES_DEPLOYMENT }}
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: pages
  cancel-in-progress: true
jobs:
  publish:
    if: contains(github.event.head_commit.message, 'release')
    uses: cheryx2020/api-service/.github/workflows/actions.yml@main
    secrets: inherit
  document:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('package.json', 'package-lock.json') }}
      - name: Install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: npm install
      - name: Detect package manager
        working-directory: ./example
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "::set-output name=manager::yarn"
            echo "::set-output name=command::install"
            echo "::set-output name=runner::yarn"
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "::set-output name=manager::npm"
            echo "::set-output name=command::ci"
            echo "::set-output name=runner::npx --no-install"
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node üçâ
        uses: actions/setup-node@v3
        with:
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          node-version: 18
      - name: Setup Pages üîß
        id: pages
        uses: actions/configure-pages@v1
        with:
          static_site_generator: next
      - name: Restore cache üíæ
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json',
            '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: >
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json',
            '**/yarn.lock') }}-
      - name: Remove build cache
        working-directory: ./example
        run: rm -rf .next/cache
      - name: Install dependencies ü•ë
        working-directory: ./example
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{
          steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js üçÑ
        working-directory: ./example
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Static HTML export with Next.js ü•Ø
        working-directory: ./example
        run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Rename files
        working-directory: ./example/out
        run: find -type f -exec sed -i 's/_next/next/g' {} +
      - name: Rename folder
        working-directory: ./example/out
        run: mv _next next
      - name: Rename app
        working-directory: ./example/out
        run: find -type f -exec sed -i 's/_app-/app-/g' {} +
      - name: Install rename package
        run: sudo apt-get install rename
      - name: Rename app filemane
        working-directory: ./example/out/next/static/chunks/pages/
        run: rename 's/^_app-/app-/' _app-*
      - name: Rename _buildManifest.js
        working-directory: ./example/out
        run: find -type f -exec sed -i 's/_buildManifest/buildManifest/g' {} +
      - name: Rename file _buildManifest.js
        working-directory: ./example/out
        run: |
          find . -depth -name "*_buildManifest*" -execdir rename 's/_buildManifest/buildManifest/' {} \;
          find . -depth -name "*buildManifest*" -printf "%h/%f\\n"
      - name: Rename _ssgManifest.js
        working-directory: ./example/out
        run: find -type f -exec sed -i 's/_ssgManifest/ssgManifest/g' {} +
      - name: Rename file _ssgManifest.js
        working-directory: ./example/out
        run: |
          find . -depth -name "*_ssgManifest*" -execdir rename 's/_ssgManifest/ssgManifest/' {} \;
          find . -depth -name "*ssgManifest*" -printf "%h/%f\\n"
      - name: Upload artifact ‚õ±Ô∏è
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./example/out
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: document
    steps:
      - name: Deploy to GitHub Pages üöÄ
        id: deployment
        uses: actions/deploy-pages@v1
